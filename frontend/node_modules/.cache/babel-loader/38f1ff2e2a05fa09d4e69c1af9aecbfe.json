{"ast":null,"code":"var _jsxFileName = \"/home/ndeleo/moviepop/frontend/src/components/MoviesGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getMovies } from \"../utils/getMovies\";\nimport { MovieItem } from \"./MovieItem\";\nimport styles from \"../components styles/MoviesGrid.module.css\";\nimport { NoResults } from \"./NoResults\";\nimport { WaitImg } from \"./WaitImg\";\nimport { useQuery } from \"../hooks/useQuery\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MoviesGrid(_ref) {\n  _s();\n\n  let {\n    search\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // const query = useQuery();\n  // const search = query.get(\"search\");\n\n  useEffect(() => {\n    setIsLoading(true);\n    const searchURL = search ? search : \"star wars\";\n    getMovies(searchURL).then(data => {\n      setMovies(data);\n      setIsLoading(false);\n    });\n  }, [search]);\n\n  if (!isLoading && movies.length === 0) {\n    return /*#__PURE__*/_jsxDEV(NoResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(WaitImg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: styles.moviesGrid,\n    children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieItem, {\n      movie: movie\n    }, movie.show.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MoviesGrid, \"BSwq18b0190zoSr/8nItHD6xJCs=\");\n\n_c = MoviesGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"sources":["/home/ndeleo/moviepop/frontend/src/components/MoviesGrid.jsx"],"names":["useEffect","useState","getMovies","MovieItem","styles","NoResults","WaitImg","useQuery","MoviesGrid","search","movies","setMovies","isLoading","setIsLoading","searchURL","then","data","length","moviesGrid","map","movie","show","id"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,MAAP,MAAmB,4CAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAEA,OAAO,SAASC,UAAT,OAA8B;AAAA;;AAAA,MAAV;AAACC,IAAAA;AAAD,GAAU;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C,CAFmC,CAInC;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMC,SAAS,GAAGL,MAAM,GAAGA,MAAH,GAAY,WAApC;AACAP,IAAAA,SAAS,CAACY,SAAD,CAAT,CAAqBC,IAArB,CAA2BC,IAAD,IAAU;AAClCL,MAAAA,SAAS,CAACK,IAAD,CAAT;AACAH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAHD;AAID,GAPQ,EAON,CAACJ,MAAD,CAPM,CAAT;;AASA,MAAI,CAACG,SAAD,IAAcF,MAAM,CAACO,MAAP,KAAkB,CAApC,EAAuC;AACrC,wBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIL,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAI,IAAA,SAAS,EAAER,MAAM,CAACc,UAAtB;AAAA,cACGR,MAAM,CAACS,GAAP,CAAYC,KAAD,iBACV,QAAC,SAAD;AAA+B,MAAA,KAAK,EAAEA;AAAtC,OAAgBA,KAAK,CAACC,IAAN,CAAWC,EAA3B;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA/Bed,U;;KAAAA,U","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getMovies } from \"../utils/getMovies\";\nimport { MovieItem } from \"./MovieItem\";\n\nimport styles from \"../components styles/MoviesGrid.module.css\";\nimport { NoResults } from \"./NoResults\";\nimport { WaitImg } from \"./WaitImg\";\nimport { useQuery } from \"../hooks/useQuery\";\n\nexport function MoviesGrid({search}) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // const query = useQuery();\n  // const search = query.get(\"search\");\n\n  useEffect(() => {\n    setIsLoading(true);\n    const searchURL = search ? search : \"star wars\";\n    getMovies(searchURL).then((data) => {\n      setMovies(data);\n      setIsLoading(false);\n    });\n  }, [search]);\n\n  if (!isLoading && movies.length === 0) {\n    return <NoResults />;\n  }\n\n  if (isLoading) {\n    return <WaitImg />;\n  }\n\n  return (\n    <ul className={styles.moviesGrid}>\n      {movies.map((movie) => (\n        <MovieItem key={movie.show.id} movie={movie} />\n      ))}\n    </ul>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}